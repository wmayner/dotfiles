# Source environment variables immediately
source ~/.globalenv

# Path to your oh-my-zsh configuration
ZSH=$HOME/.oh-my-zsh

# Path to your oh-my-zsh custom directory (default is .oh-my-zsh/custom/)
ZSH_CUSTOM=.oh-my-zsh/custom

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="wmayner"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
export UPDATE_ZSH_DAYS=3

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(grunt command-not-found git github git-flow git-extras rake history-substring-search vundle virtualenvwrapper python pip lol fasd)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...
# =============================================================================

autoload colors;
# setopt auto_cd
# setopt multios
# setopt cdablevarS
# setopt prompt_subst

# Find the option for using colors in ls, depending on the version: Linux or BSD
ls --color -d . &>/dev/null 2>&1 && alias ls='ls --color=auto' || alias ls='ls -G'
# Use dircolors if available
dircolors &>/dev/null 2>&1 && eval `dircolors $DOTFILES/zsh/dircolors.ansi-dark` || export LSCOLORS="Gxfxcxdxbxegedabagacad"
# Use GNU ls if available (for Mac OSX; `brew install coreutils`)
gdircolors &>/dev/null 2>&1 && eval `gdircolors $DOTFILES/zsh/dircolors.ansi-dark` && alias ls='gls --color=auto'

export GREP_OPTIONS='--color=auto'
export GREP_COLOR='1;31'

# Don't treat `sudo` as a separate command (so don't use autocorrect)
alias sudo="nocorrect sudo"

# Fix slow git tab completion
__git_files () { 
    _wanted files expl 'local files' _files     
}

# Use powerline
source ~/.local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh

# Source every .zsh file in this repo
for config_file ($DOTFILES/**/*.zsh) source $config_file

# Use vi to edit command line
bindkey -v

# Remove delay in entering command mode, as described by
# http://zsh.sourceforge.net/Guide/zshguide04.html:
#
# > You can remove all bindings starting with a given prefix by adding the `-p
# > option. The example given in the manual,
# >
# >     bindkey -rpM viins '\e'
# >
# > (except it uses the equivalent form `^[') is amongst the most useful, as it
# > will remove the annoying delay after you type `\e' to enter vi command mode.
# > The delay is there because the cursor keys usually also start with \e and the
# > shell is waiting to see if you actually typed one of those.
# bindkey -rpM viins "\e"

# Use control+j and control+k for scrolling through history, since removing all
# bindings that begin with escape also removes the arrow-key bindings
bindkey "^K" history-substring-search-up
bindkey "^J" history-substring-search-down

# Press Ctrl+Q to push the current command on to the stack. It will disappear,
# allowing you to enter another command, after which it will reappear in the
# prompt.
bindkey "^Q" push-input

# get aliases
source $ALIASES

# Use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
if [[ -a ~/.zshrc.local ]]
then
  source ~/.zshrc.local
fi

export TERM="xterm-256color"

# SHELLSHOCK:
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# To anyone worried about using servers that may not have attentive admins -
# put the following line(s) in your ~/.bashrc to help protect yourself:
 
env x='() { :;}; echo "WARNING: SHELLSHOCK DETECTED"' \
  bash --norc -c ':' 2>/dev/null;
 
# It will print to stdout if and only if your shell is vulnerable, and nothing
# will be printed if your shell has been patched. It will take a little longer
# to launch a new shell slightly, but for some, this may be worth it.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

export NVM_DIR="/home/will/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

# Initialize fasd
eval "$(fasd --init auto)"

# Load `zmv` (alternative to `mmv`)
autoload zmv

# Use extended globbing
setopt extendedglob
