" Modeline and Notes {
" vim: set foldmarker={,} foldlevel=0  foldmethod=marker :
"
"   This is the personal .vimrc.local file of Will Mayner.
"   Find me at www.willmayner.com or @wmayner.
"
"   It is meant to be used on top of Steve Francia's spf13-vim
"   distribution, at https://github.com/spf13/spf13-vim.
"
" }

" Neovim {

  " Figure out the Python interpreter for Neovim
  if exists("$VIRTUAL_ENV")
      let g:python3_host_prog=substitute(system("which -a python3 | head -n2 | tail -n1"), "\n", '', 'g')
  else
      let g:python3_host_prog=substitute(system("which python3"), "\n", '', 'g')
  endif

" }

" Environment {

  " use aliases when running shell commands within vim
  set shell=/usr/bin/zsh

  " don't need usr/include in path as far as I can tell; just slows completion
  set path=.,,

" }

" General {

  " automatically load file if it's changed externally
  set autoread

  " automatically source files named `.vimrc`
  set exrc

  " switch to existing tab if buffer is open, otherwise create new one
  set switchbuf=usetab,newtab

  set wrapscan " searches wrap around the end of the file

  set ai       " automatically set the indent of a new line (local to buffer)

  set fileencodings=utf-8

  " no spellchecking except markdown
  set nospell

" }

" Vim UI {

  " Markdown {

    " enable spellcheck
    autocmd FileType markdown set spell
    " don't conceal
    autocmd FileType markdown set conceallevel=0
    " automatically format lines while typing
    autocmd FileType markdown set textwidth=80
    autocmd FileType markdown set formatoptions-=l

  " }

  " highlight the column beyond textwidth
  set colorcolumn=+1

  " format lines with Q
  nnoremap Q mf{gq}`f
  vnoremap Q gq

  " leave insert mode quickly
  if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
      autocmd!
      au InsertEnter * set timeoutlen=0
      au InsertLeave * set timeoutlen=1000
    augroup END
  endif

  " relative line numbering
  set relativenumber

  " no spellchecking
  set nospell

  " change how files are written when editing crontab
  au FileType crontab setlocal bkc=yes

  autocmd BufNewFile,BufRead *.py set iskeyword-=_ iskeyword-=.

  " set filetype to 'tex' for .tex files
  autocmd BufNewFile,BufRead *.tex set filetype=tex

  " Solarized {

    set t_Co=16
    " use proper (default) solarized options
    let g:solarized_termcolors=16
    let g:solarized_termtrans=0
    let g:solarized_degrade=0
    let g:solarized_bold=1
    let g:solarized_underline=1
    let g:solarized_italic=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    let g:solarized_hitrail=0
    let g:solarized_menu=1
    " Make sure to load the colorscheme after setting the termcolors=16
    set background=dark
    colorscheme solarized

  " }

  " Tabs {

    nnoremap <D-L> :execute "tabmove" tabpagenr()<CR>
    nnoremap <D-H> :execute "tabmove" tabpagenr() - 2<CR>

  " }

  " Line wrapping {

    " This will get Vim to wrap existing text as desired. wrap tells Vim to
    " word wrap visually (as opposed to changing the text in the buffer), and
    " linebreak tells Vim to only wrap at a character in the breakat option
    " (by default, this includes " ^I!@*-+;:,./?" (note the inclusion of " "
    " and that ^I is the control character for Tab)).
    set wrap
    set linebreak
    set nolist  " list disables linebreak
    " In addition, you will need to prevent Vim from automatically inserting
    " line breaks in newly entered text. The easiest way to do this is:
    set textwidth=0
    set wrapmargin=0
    " If you want to keep your existing 'textwidth' settings for most lines in
    " your file, but not have Vim automatically reformat when typing on
    " existing lines, you can do this with:
    set formatoptions+=l

  " }

 " " Tab completion {

 "      noremap <expr> <C-n> pumvisible() ? '<C-n>' :
 "        \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
 "      " keep menu item always highlighted by simulating <Up> on pu visible
 "      inoremap <expr> <C-p> pumvisible() ? '<C-p>' :
 "        \ '<C-p><C-r>=pumvisible() ? "\<lt>Up>" : ""<CR>'

 "      function! CleverTab()
 "      if pumvisible()
 "        return "\<C-N>"
 "      endif
 "      if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
 "        return "\<Tab>"
 "      elseif exists('&omnifunc') && &omnifunc != ''
 "        return "\<C-X>\<C-O>"
 "      else
 "        return "\<C-N>"
 "      endif
 "    endfunction
 "    inoremap <Tab> <C-R>=CleverTab()<CR>

 "  " }

  set vb           " stop vim from beeping all the damn time

  set cursorcolumn " highlight the column the cursor is on

  set showmatch    " show matching parens

  " fixes syntax highlighting for stylus
  autocmd BufNewFile,BufRead *.styl set filetype=stylus

  " If doing a diff. Upon writing changes to file, automatically update the
  " differences
  autocmd BufWritePost * if &diff == 1 | diffupdate | endif

  " " Auto update vimdiff
  "
  " augroup AutoDiffUpdate
  "   au!
  "   autocmd InsertLeave * if &diff | diffupdate | let b:old_changedtick = b:changedtick | endif
  "   " autocmd CursorHold *
  "         \ if &diff &&
  "         \    (!exists('b:old_changedtick') || b:old_changedtick != b:changedtick) |
  "         \   let b:old_changedtick = b:changedtick | diffupdate |
  "         \ endif
  " augroup END

" }

" GUI Vim {

  set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h22
  " set guifont=Droid\ Sans\ Mono\ for\ Powerline:h18
  " set guifont=Inconsolata-dz\ for\ Powerline:h18
  " set guifont=Liberation\ Mono\ for\ Powerline:h18
  " set guifont=Menlo\ for\ Powerline:h18

  " enable shift-select-replace movement with arrow keys
  if has("gui_macvim")
    let macvim_hig_shift_movement = 1
  endif

" }

" Formatting {

  " Use 2-space tabs
  set shiftwidth=2
  set tabstop=2
  set softtabstop=2
  " Enforce for certain languages
  autocmd BufNewFile,BufReadPost *.yml set shiftwidth=2 tabstop=2 softtabstop=2

  " But use 4-space tabs for certain languages
  autocmd BufNewFile,BufReadPost *.py,*.rst,*.html,*.cpp,*.h set shiftwidth=4 tabstop=4 softtabstop=4

  " Use actual tab characters for Makefiles
  autocmd FileType make setlocal noexpandtab

  function! <SID>StripTrailingWhitespaces()
      " Preparation: save last search, and cursor position.
      let _s=@/
      let l = line(".")
      let c = col(".")
      " Do the business:
      %s/\s\+$//e
      " Clean up: restore previous search history, and cursor position
      let @/=_s
      call cursor(l, c)
  endfunction

  " Automatically strip trailing whitespace in python, js, coffee, and stylus
  " upon write
  autocmd BufWritePre *.py,*.js,*.coffee,*.styl :call <SID>StripTrailingWhitespaces()

  " Code folding {

  " Use modeline if there is one
  set modeline

    " default code folding (excludes help files) {

      " if !(&ft=='help')
      "   setlocal foldmarker={{{,}}} " fold things in triple braces
      "   setlocal foldlevel=0        " file opens with everything folded
      "   setlocal foldmethod=marker  " fold using markers
      "   " insert commented fold markers before and after with [f and ]f
      "   nnoremap ,,,,,,,  O{{{<Esc>
      "   nnoremap ,,,,,,,, o}}}<Esc>
      "   " nmap [f ,,,,,,,,cc
      "   " nmap ]f ,,,,,,,,,cc
      "   nmap [f ,,,,,,,\\\
      "   nmap ]f ,,,,,,,,\\\
      " endif

      " " attempt at using foldexpr for default folding {

      " if !(&ft=='tex' || &ft=='txt' || &ft=='help')
      "   setlocal foldlevel=0        " file opens with everything folded
      "   setlocal foldmethod=expr  " fold using markers
      "   setlocal foldexpr=GetDefaultFold(v:lnum)     " fold things in braces
      " endif

      " function! GetDefaultFold(lnum)
      "   if getline(a:lnum) =~? '\v^\s*$'
      "     return '-1'
      "   endif
      "   if getline(a:lnum) =~? '\v.*\{\{\{'
      "     return 'a1'
      "   endif
      "   if getline(a:lnum) =~? '\v.*}\}\}'
      "     return 's1'
      "   endif

      "   let this_indent = IndentLevel(a:lnum)
      "   let next_indent = IndentLevel(NextNonBlankLine(a:lnum))

      "   if next_indent == this_indent
      "     return this_indent
      "   elseif next_indent < this_indent
      "     return this_indent
      "   elseif next_indent > this_indent
      "     return '>' . next_indent
      "   endif
      " endfunction

      " " }

    " }

    " TeX {

      if &ft=='tex'
        setlocal foldmarker=[{[,]}] " fold things in commented triple braces
        setlocal foldlevel=0        " file opens with everything folded
        setlocal foldmethod=marker  " fold using markers
        " insert fold markers
        nnoremap ,,,,,,,  O[{[<Esc>
        nnoremap ,,,,,,,, o]}]<Esc>
        nmap [f ,,,,,,,,cc
        nmap ]f ,,,,,,,,,cc
      endif

  "   " helper functions for foldexpr {
  "     " for an explanation of these helper functions, see
  "     " http://learnvimscriptthehardway.stevelosh.com/chapters/49.html#expr-folding

  "   function! NextNonBlankLine(lnum)
  "     let numlines = line('$')
  "     let current = a:lnum + 1

  "     while current <= numlines
  "       if getline(current) =~? '\v\S'
  "         return current
  "       endif

  "       let current += 1
  "     endwhile

  "     return -2
  "   endfunction

  "   function! IndentLevel(lnum)
  "     return indent(a:lnum) / &shiftwidth
  "   endfunction

  "   " }

    " attempt at using foldexpr {

      " if &ft=='tex'

      "   setlocal foldlevel=0                  " file opens with everything folded
      "   setlocal foldmethod=expr              " fold using expressions
      "   setlocal foldexpr=GetTeXFold(v:lnum)  " use function below to determine the fold expression

      "   " fold anything in in %{ %} and inside environments
      "   function! GetTeXFold(lnum)
      "     if getline(a:lnum) =~? '\v^\s*$'  " if we're on a blank line...
      "       return '-1'                     " ...the fold level is undefined
      "     endif
      "     if getline(a:lnum) =~? '\v^\s*\\begin\{.*\}' " if the first thing on the line is \begin{<env>}...
      "       return 'a1'                                " ...'add 1' to fold level
      "     endif
      "     if getline(a:lnum) =~? '\v^\s*\\end\{.*\}'   " if the last thing on the line is \end{<env>}...
      "       return 's1'                                " ...'add 1' to fold level
      "     endif
      "     if getline(a:lnum) =~? '\v^.*\%\{$' " if the last thing on the line is %{
      "       return 'a1'                       " ...'add 1' to fold level
      "     endif
      "     if getline(a:lnum) =~? '\v^.*\%\}$' " if the last thing on the line is %}
      "       return 's1'                       " ...'subtract 1' to fold level
      "     endif
      "     return '=' " otherwise the fold level is inherited from previous line
      "   endfunction

      " endif

      " }

  " }

    " CoffeeScript {

      " code folding (delete nofoldenable to enable folding by default)
      autocmd BufNewFile,BufReadPost \(*.coffee\|Cakefile\) setl foldmethod=indent "nofoldenable

      " always use 2-space tabs
      autocmd BufNewFile,BufReadPost \(*.coffee\|Cakefile\) setl shiftwidth=2 expandtab

    " }

    " JSON {

      " code folding (delete nofoldenable to enable folding by default)
      autocmd BufNewFile,BufReadPost \(*.coffee\|Cakefile\) setl foldmethod=marker foldmarker={,} "nofoldenable

    " }

    " Jade {

      " code folding (delete nofoldenable to enable folding by default)
      autocmd BufNewFile,BufReadPost *.jade setl foldmethod=indent "nofoldenable

      " always use 2-space tabs
      autocmd BufNewFile,BufReadPost *.jade setl shiftwidth=2 expandtab

    " }

    " spf13 .vimrc {

      " spf13 uses single braces for folding, so make a special case for that
      autocmd BufNewFile,BufReadPost *.vimrc setl foldmethod=marker foldmarker={,}

    " }

  " }

" }

  " vim-sneak {
  
    let g:sneak#label = 1
    let g:sneak#s_next = 1

  " }

  " vim-slash {

    noremap <Plug>(slash-after) zz
    if has('timers')
      " Blink 2 times with 50ms interval
      noremap <expr> <Plug>(slash-after) slash#blink(2, 50)
    endif

  " }

  " Commentary {

    nmap g\\ <Plug>CommentaryLine

  " }

  " Fugitive {

    cnoremap Gwrite echo "This command has been disabled. If the current buffer is a git index file, it will silently destroy your work."<CR>

  " }

  " Wipeout {

    " wipeout.vim - Destroy all buffers that are not open in any tabs or windows.
    "
    " Adapted from the following StackOverflow answer:
    " http://stackoverflow.com/questions/1534835
    "
    " Author: Artem Nezvigin <artem@artnez.com>

    command! -bang Wipeout :call Wipeout(<bang>0)

    function! Wipeout(bang)
      " figure out which buffers are visible in any tab
      let visible = {}
      for t in range(1, tabpagenr('$'))
        for b in tabpagebuflist(t)
          let visible[b] = 1
        endfor
      endfor
      " close any buffer that are loaded and not visible
      let l:tally = 0
      let l:cmd = 'bw'
      if a:bang
        let l:cmd .= '!'
      endif
      for b in range(1, bufnr('$'))
        if buflisted(b) && !has_key(visible, b)
          let l:tally += 1
          exe l:cmd . ' ' . b
        endif
      endfor
      echon "Deleted " . l:tally . " buffers"
    endfun

    nnoremap \W :Wipeout<CR>

  " }

  " Tabularize {

    " These are actually in spf13

    " " tabularize on ampersand (for LaTeX tables)
    " nnoremap <Leader>a& :Tabularize /&<CR>
    " vnoremap <Leader>a& :Tabularize /&<CR>

    " " tabularize on percent (for LaTeX comments)
    " nnoremap <Leader>a% :Tabularize /%<CR>
    " vnoremap <Leader>a% :Tabularize /%<CR>

    " " tabularize on colon
    " nnoremap <Leader>a: :Tabularize /:/l0c1<CR>
    " vnoremap <Leader>a: :Tabularize /:/l0c1<CR>

    " " tabularize on equal
    " nnoremap <Leader>a= :Tabularize /=<CR>
    " vnoremap <Leader>a= :Tabularize /=<CR>

    " " tabularize on hash (for bash and CoffeeScript comments)
    " nnoremap <Leader>a# :Tabularize /#<CR>
    " vnoremap <Leader>a# :Tabularize /#<CR>

    " " tabularize on comma (for bash and CoffeeScript comments)
    " nnoremap <Leader>a, :Tabularize /,/l0c1<CR>
    " vnoremap <Leader>a, :Tabularize /,/l0c1<CR>

  " }

  " CtrlP {

    let ctrlp_promt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ 'AcceptSelection("v")': ['<c-v>', '<RightMouse>'],
    \ }
    let g:ctrlp_show_hidden = 1

    nnoremap <C-t> :CtrlP<CR>
    nnoremap <C-p> :CtrlPMRU<CR>
    nnoremap <C-b> :CtrlPBuffer<CR>

    " Persistent caching across vim sessions
    let g:ctrlp_clear_cache_on_exit = 0

  " }

  " GitGutter {

    let g:gitgutter_eager=0

  " }

  " MiniBufExplorer {

    let g:miniBufExplMapWindowNavVim=1
    let g:miniBufExplMapWindowNavArrows=1
    let g:miniBufExplMapCTabSwitchBufs=1
    let g:miniBufExplModSelTarget=1

  " }

  " indent_guides {

    " disable by default (press <Leader>ig to activate)
    let g:indent_guides_enable_on_vim_startup=0

  " }

  " CtrlP {

    " use ctrlp but keep <C-t> mapping
    let g:ctrlp_map='<C-p>'

    " persist index info in cache between sessions
    let g:ctrlp_clear_cache_on_exit = 1

    let g:ctrlp_working_path_mode = 'ra'

    " sane ignore for ctrlp
    unlet g:ctrlp_custom_ignore
    let g:ctrlp_custom_ignore = '\v[\/](node_modules|build|dist)|(\.(swp|ico|git|svn))$'

  " }

  " undotree {

    " UndotreeToggle shortcut
    nnoremap ,u :UndotreeToggle<CR>

  " }

  " vim-surround {

    " type cs"- to change "text" to ``text'' (for LaTeX ligatures)
    autocmd FileType tex let b:surround_45="``\r''""'"
  " }

  " vim-unimpaired {

    " switch q and l bindings, and center screen after commands
    nmap [q <Plug>unimpairedLPrevious \| zz
    nmap ]q <Plug>unimpairedLNext \| zz
    nmap [Q <Plug>unimpairedLFirst \| zz
    nmap ]Q <Plug>unimpairedLLast \| zz
    nmap [l <Plug>unimpairedCPrevious \| zz
    nmap ]l <Plug>unimpairedCNext \| zz
    nmap [L <Plug>unimpairedCFirst \| zz
    nmap ]L <Plug>unimpairedClast \| zz

  " }

  " restore_view {

    set viewoptions=cursor,folds,slash,unix
    " let g:skipview_files = ['*\.vim']

  " }

  " Matchit {

    runtime macros/matchit.vim

  " }

  " vim-coffee-script {

    " open the scratch buffer vertically by default
    let coffee_compile_vert = 1
    " use coffeelint.json to configure coffeelint
    let g:coffee_lint_options = '-f coffeelint.json'
    " use <leader>c to compile snippets
    vnoremap <leader>f <esc>:'<,'>:CoffeeCompile<CR>
    noremap <leader>f :CoffeeCompile<CR>
    " jump to line in compiled js with :C<number>
    " command -nargs=1 C CoffeeCompile | :<args>

  " }

  " PythonMode {

    " Disable syntax highlighting (doesn't work with Python 3)
    let g:pymode_syntax = 0

    " Use Syntastic instead
    let g:pymode_lint = 0

    " Don't use rope completion
    let g:pymode_rope_complete_on_dot = 0

  " }

  " Syntastic {

    " Use python3
    let g:syntastic_python_python_exe = '/home/will/python3.6/bin/python3'
    " Use pylint
    " let g:syntastic_python_checkers = ['flake8', 'pylint']
    let g:syntastic_python_checkers = ['flake8']
    " Display errors from different checkers together
    let g:syntastic_aggregate_errors = 1

    " Recommended settings
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0

  " }
  
  " Neomake {

    " Run Neomake when writing a buffer, and on normal mode changes (after
    " 750ms).
    call neomake#configure#automake('rnw', 750)
    " Open the list automatically.
    let g:neomake_open_list = 2

  " }

  " SnipMate {

    let g:snips_author = 'Will Mayner <wmayner@gmail.com>'
    " diable snippets temporarily
    let g:loaded_snipmate = 1
    let g:loaded_neosnippet = 1

  " }

  " Session.vim {

    let g:session_autoload = 0
    let g:session_autosave = 0
    let g:session_default_to_last = 1
    let g:session_default_overwrite = 1

  " }

  " NERDTree {

    " don't open NERDTree on gvim/macvim startup
    let g:nerdtree_tabs_open_on_gui_startup = 0

    " don't open NERDTree on console vim startup
    let g:nerdtree_tabs_open_on_console_startup = 0

    " don't open NERDTree if vim starts in diff mode
    let g:nerdtree_tabs_no_startup_for_diff = 1

    " don't open NERDTree on new tab creation (if NERDTree was globally opened by :NERDTreeTabsToggle)
    let g:nerdtree_tabs_open_on_new_tab = 0

  " }

  " Airline {

    " user powerline-fonts in airline
    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'solarized'

  " }

  " operator-camelize {

    " <Leader>m toggles camelCase
    map <Leader>m <Plug>(operator-camelize-toggle)

  " }

  " EasyMotion {

    " ensure prefix is single leader
    map <Leader> <Plug>(easymotion-prefix)

  " }

  " CamelCaseMotion {

    " override prefix to be double leader
    map w <Plug>CamelCaseMotion_w
    map b <Plug>CamelCaseMotion_b
    map e <Plug>CamelCaseMotion_e
    omap iw <Plug>CamelCaseMotion_iw
    xmap iw <Plug>CamelCaseMotion_iw
    omap ib <Plug>CamelCaseMotion_ib
    xmap ib <Plug>CamelCaseMotion_ib
    omap ie <Plug>CamelCaseMotion_ie
    xmap ie <Plug>CamelCaseMotion_ie

  " }

  " YouCompleteMe {

    " enable completion for stuff in comments
    let g:ycm_collect_identifiers_from_comments_and_strings = 1

    " extra completions for e.g. C++
    let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

    " populate location list for detailed diagnostic messages
    let g:ycm_always_populate_location_list = 1

  " }
  
  " limelight.vim {

    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 'black'
    nmap <Leader>l :Limelight!!<CR>
    xmap <Leader>l :Limelight!!<CR>
    vmap <Leader>l <Plug>(Limelight)

  " }

  " goyo.vim {

    nmap <Leader>G :Goyo<CR>

  " }

  " vim-markdown {

  let g:vim_markdown_new_list_item_indent=2

  " }

  " Neoformat {

  autocmd BufWritePre *.js,*.py,*.md,*.markdown Neoformat

  let g:neoformat_run_all_formatters = 1
  let g:neoformat_enabled_python = ['autopep8', 'yapf', 'isort']
  let g:neoformat_enabled_markdown = ['prettier']
  let g:neoformat_markdown_prettier = {
            \ 'exe': 'prettier',
            \ 'args': ['--parser=markdown', '--prose-wrap=always'],
            \ 'stdin': 1
            \ }

  " }

" }

" Key (re)mappings {

  vnoremap \p :diffput<CR>
  vnoremap \o :diffget<CR>

  " Display the current filename
  nnoremap \f :echo @%<CR>

  " Allow saving of files as sudo when I forgot to start vim using sudo.
  cmap w!! w !sudo tee > /dev/null %

  " also switch tabs with Alt+Command+Arrows, for consistency with Chrome and
  " iTerm2
  nnoremap <A-D-Right> :tabn<CR>
  nnoremap <A-D-Left> :tabp<CR>

  " close location list
  nnoremap \q :lclose<CR>

  " fast write
  nnoremap \w :w<CR>

  " fast write-quit
  nnoremap \x :x<CR>

  " <Leader>vs splits in 2 and sets scrollbind
  nnoremap <silent> <Leader>vs :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>

  " clear search highlighting with enter key
  " second enter is for triggering quickfix jumps and the like
  nnoremap <silent> <CR> :noh<CR><CR>

  " clear search buffer
  nnoremap \cc :let @/ =""<CR>:<backspace>

  " always do very magic search
  " (special characters don't need to be escaped with a '\')
  " nnoremap / /\v

  " window navigation and resizing {
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l
    inoremap <C-h> <C-o><C-w>h
    inoremap <C-j> <C-o><C-w>j
    inoremap <C-k> <C-o><C-w>k
    inoremap <C-l> <C-o><C-w>l
    vnoremap <C-h> <C-w>h
    vnoremap <C-j> <C-w>j
    vnoremap <C-k> <C-w>k
    vnoremap <C-l> <C-w>l
    " horizontal shrink
    nnoremap <silent> ,= :exe "resize " . (winheight(0) * 3/2)<CR>
    " horizontal expand
    nnoremap <silent> ,- :exe "resize " . (winheight(0) * 2/3)<CR>
    " vertical shrink
    nnoremap <silent> \= :exe "vertical resize" . (winwidth(0) * 3/2)<CR>
    " vertical expand
    nnoremap <silent> \- :exe "vertical resize" . (winwidth(0) * 2/3)<CR>
  " }

  " move line down and match indentation in all modes
  " NOTE: those strange symbols are CLI Vim for <M-j> and <M-k>, respectively.
  "       to see them, enter insert mode, then press <C-v>, then type <M-k>
  noremap ∆ :m .+1<CR>==
  " move line up and match indentation in all modes
  noremap ˚ :m .-2<CR>==

  " help navigation
  autocmd FileType help nnoremap <buffer> <CR> <C-]>
  autocmd FileType help nnoremap <buffer> <BS> <C-O>
  autocmd FileType help nnoremap <buffer> o /'\l\{2,\}'<CR>
  autocmd FileType help nnoremap <buffer> O ?'\l\{2,\}'<CR>
  autocmd FileType help nnoremap <buffer> s /\|\zs\S\+\ze\|<CR>
  autocmd FileType help nnoremap <buffer> S ?\|\zs\S\+\ze\|<CR>

  " edit this file
  nnoremap \v :tabedit ~/.vimrc.local<CR>
  " edit the main vimrc
  nnoremap \V :tabedit $MYVIMRC<CR>

  " reload .vimrc.local
  nnoremap \s :source ~/.vimrc.local<CR>
  " reload .vimrc
  nnoremap \S :source $MYVIMRC<CR>

  " edit .vimrc
  if !exists("VRC_command_loaded")
    let VRC_command_loaded=1
    command VRC tabedit ~/.vimrc
  endif

  " reload this .vimrc
  if !exists("SVRC_command_loaded")
    let SVRC_command_loaded=1
    command SVRC source ~/.vimrc
  endif

  " edit local bundles
  if !exists("EB_command_loaded")
    let EB_command_loaded=1
    command EB tabedit ~/.vimrc.bundles.local
  endif

  " swap : and ;
  nnoremap ; :
  nnoremap : ;
  vnoremap ; :
  vnoremap : ;

  " space will toggle folds if on one, otherwise move right (default behavior)
  nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
  " in visual mode, it will create a manual fold for the highlighted text
  vnoremap <Space> zf

  " search mappings: these will make it so that going to the next one in a
  " search will center on the line it's found in.
  " TODO?
  noremap N Nzz
  noremap n nzz

" }

  " TeX {

    " disable conceal for tex files
    autocmd BufNewFile,BufRead *.tex set cole=0

    " LaTeX-Box {

      " set latexmk options to 'preview continuously' and -pdfps (from  http://stackoverflow.com/questions/3723493/latex-and-vim-usage)
      " let g:LatexBox_latexmk_options='-pvc'

      " " view output with Skim
      " let g:LatexBox_viewer='open -a Skim'

      " " automatically jump to position in pdf
      " let g:LatexBox_autojump=1

      " let g:LatexBox_latexmk_async=1

      " let g:LatexBox_latexmk_preview_continuously=1

      " " use SyncTex with Skim viewer
      " noremap <silent> <Leader>ls :silent !/Applications/Skim.app/Contents/SharedSupport/displayline\ <C-R>=line('.')<CR> "<C-R>=LatexBox_GetOutputFile()<CR>" "%:p" <CR>

      " " automatically write file upon leaving insert mode (if modified)
      " " au InsertLeave *.tex if(&mod && expand('%')!='') | write | execute 'Latexmk' | execute 'LatexErrors' | endif

      " " shortcut for write, compile with latexmk in background, and view errors (if any)
      " " au FileType tex noremap \w :w<CR>:Latexmk<CR>
      " autocmd BufNewFile,BufRead *.tex noremap \w :w<CR>:silent Latexmk<CR>

      " " Write, compilation with latexmk in background
      " noremap <Leader>ll :w<CR>:Latexmk<CR>

      " " Write, compilation with latexmk in background, view errors
      " noremap <Leader>LL :w<CR>:Latexmk<CR>:LatexErrors<CR>

      " " View output
      " noremap <Leader>lv :LatexView<CR>

      " " Clean temporary output from LaTeX.
      " noremap <Leader>lc :LatexmkClean<CR>

      " " Clean all output from LaTeX.
      " noremap <Leader>lC :LatexmkCleanAll<CR>

      " " Stop latexmk if it is running.
      " noremap <Leader>lk :LatexmkStop<CR>

      " " Show the running status of latexmk for the current buffer.
      " noremap <Leader>lg :LatexmkStatus<CR>

      " " Show the running status of latexmk for all buffers with process group ID's.
      " noremap <LocalLeader>lG :LatexmkStatusDetailed<CR>

      " " Load the log file for the current document and jump to the first error.
      " noremap <Leader>le :LatexErrors<CR>

    " }

  " " LaTeX-Suite {

    " override <C-j>, the 'next placeholder' binding
    imap <C-g> <Plug>IMAP_JumpForward
    nmap <C-g> <Plug>IMAP_JumpForward

    " override <Leader>lv
    " nnoremap <Leader>lv :silent !open expand("%:r") . '.pdf'<CR>:echo worked!<CR>

    " IMPORTANT: grep will sometimes skip displaying the file name if you
    " search in a singe file. This will confuse Latex-Suite. Set your grep
    " program to always generate a file-name."
    set grepprg=grep\ -nH\ $*

    " compile to pdf
    let g:Tex_DefaultTargetFormat='pdf'

    " pdf compile and view settings
    " let g:Tex_ViewRule_pdf='Skim'
    let g:Tex_CompileRule_pdf='latexmk -pdf'

    " dvi compile and view settings
    let g:Tex_ViewRule_dvi="Skim"
    let g:Tex_CompileRule_dvi='latex -src -specials -interaction=nonstopmode $*'

    " ignore all warnings below level 4
    let g:TCLevel=4

    " go to first error after pressing \ll
    let g:Tex_GotoError=0

    " one last thing for latex
    let g:tex_flavor='latex'

  " " }

  " }

  " Custom commands {

    " Switch to previously active tab
    " From http://stackoverflow.com/a/2120168/1085344
    let g:lasttab = 1
    nmap \tl :exe "tabn "g:lasttab<CR>
    au TabLeave * let g:lasttab = tabpagenr()

    " Snatched from http://stackoverflow.com/a/4793316/1085344
    " This function creates the command Qargs, for use in the
    " refactoring workflow described in the answer linked above.

    " Define a command to make it easier to use
    command! -nargs=+ QFDo call QFDo(<q-args>)

    " Function that does the work
    function! QFDo(command)
      " Create a dictionary so that we can
      " get the list of buffers rather than the
      " list of lines in buffers (easy way
      " to get unique entries)
      let buffer_numbers = {}
      " For each entry, use the buffer number as
      " a dictionary key (won't get repeats)
      for fixlist_entry in getqflist()
        let buffer_numbers[fixlist_entry['bufnr']] = 1
      endfor
      " Make it into a list as it seems cleaner
      let buffer_number_list = keys(buffer_numbers)

      " For each buffer
      for num in buffer_number_list
        " Select the buffer
        exe 'buffer' num
        " Run the command that's passed as an argument
        exe a:command
        " Save if necessary
        update
      endfor
    endfunction

  " }
